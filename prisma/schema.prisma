generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phoneNumber   Int?
  dateOfBirth   DateTime?
  Appointment   Appointment[]
  Exams         Exams[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Doctor {
  id            String        @id
  name          String
  dayOfTheWeekt DateTime
  startTime     DateTime
  endTime       DateTime
  is_available  Boolean       @db.TinyInt()
  Office        Office?       @relation(fields: [officeId], references: [id])
  officeId      String?
  Appointment   Appointment[]
}

model Office {
  id              String   @id
  city            String
  address         String
  schedule        DateTime
  name            String
  patientCapacity Int
  doctors         Doctor[]
}

model Appointment {
  id       String   @id
  time     DateTime
  room     String
  status   String
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  patient  User     @relation(fields: [userId], references: [id])
  doctorId String
  userId   String
}

model Exams {
  id           String   @id
  content      String
  patient      User     @relation(fields: [userId], references: [id])
  creationDate DateTime
  userId       String
}
